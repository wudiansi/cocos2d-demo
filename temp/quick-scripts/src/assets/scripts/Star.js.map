{"version":3,"sources":["assets\\scripts\\Star.js"],"names":["cc","Class","Component","properties","pickRidius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","onPick","gainScore","createNewStar","destroy","start","update","dt","minOpacity","opacityRatio","timer","starDuration","opacity","Math","floor"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACR;AACAC,IAAAA,UAAU,EAAE,CAFJ,CAGR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBQ,GAHP;AAuBLC,EAAAA,iBAvBK,+BAuBe;AAChB;AACA,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB,CAFgB,CAGhB;;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AAEA,WAAOJ,IAAP;AACH,GA9BI;AAgCLK,EAAAA,MAhCK,oBAgCI;AACL;AACA,SAAKR,IAAL,CAAUS,SAAV,GAFK,CAGL;;AACA,SAAKT,IAAL,CAAUU,aAAV,GAJK,CAKL;;AACA,SAAKN,IAAL,CAAUO,OAAV;AACH,GAvCI;AAyCL;AAEA;AAEAC,EAAAA,KA7CK,mBA6CG,CAEP,CA/CI;AAiDLC,EAAAA,MAjDK,kBAiDGC,EAjDH,EAiDO;AACR;AACA,QAAG,KAAKhB,iBAAL,KAA2B,KAAKD,UAAnC,EAA+C;AAC3C;AACA,WAAKW,MAAL;AACA;AACH,KANO,CAQR;;;AACA,QAAIO,UAAU,GAAG,CAAjB;AACA,QAAIC,YAAY,GAAG,IAAI,KAAKhB,IAAL,CAAUiB,KAAV,GAAkB,KAAKjB,IAAL,CAAUkB,YAAnD;AAEA,SAAKd,IAAL,CAAUe,OAAV,GAAoBJ,UAAU,GAAGK,IAAI,CAACC,KAAL,CAAWL,YAAY,IAAI,MAAMD,UAAV,CAAvB,CAAjC;AACH;AA9DI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\r\n// Learn Attribute:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 主角与星星之间距离小于这个就视为吃到\r\n        pickRidius: 5,\r\n        // foo: {\r\n        //     // ATTRIBUTES:\r\n        //     default: null,        // The default value will be used only when the component attaching\r\n        //                           // to a node for the first time\r\n        //     type: cc.SpriteFrame, // optional, default is typeof default\r\n        //     serializable: true,   // optional, default is true\r\n        // },\r\n        // bar: {\r\n        //     get () {\r\n        //         return this._bar;\r\n        //     },\r\n        //     set (value) {\r\n        //         this._bar = value;\r\n        //     }\r\n        // },\r\n    },\r\n\r\n    getPlayerDistance() {\r\n        // 根据player节点位置获取位置\r\n        let playerPos = this.game.player.getPosition();\r\n        // 计算出该星星和player之间的距离\r\n        let dist = this.node.position.sub(playerPos).mag()\r\n\r\n        return dist\r\n    },\r\n\r\n    onPick() {\r\n        // 增加得分\r\n        this.game.gainScore();\r\n        // 当星星被收集时 创建新星星\r\n        this.game.createNewStar();\r\n        // 并销毁当前星星节点\r\n        this.node.destroy();\r\n    },\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {},\r\n\r\n    start() {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        // 每帧调用中检车星星与player之间距离关系\r\n        if(this.getPlayerDistance() < this.pickRidius) {\r\n            // 小于配置的碰撞距离 执行碰撞方法\r\n            this.onPick();\r\n            return\r\n        }\r\n\r\n        // 根据game中的计时器更新星星的透明度\r\n        let minOpacity = 0\r\n        let opacityRatio = 1 - this.game.timer / this.game.starDuration;\r\n\r\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\r\n    },\r\n});\r\n"]}